import { URL } from 'url';
import fetch from 'isomorphic-fetch';

interface ResponseObject {
    results: { [key:string]: any; url: string }[]
    next: string
    previous: string
    count: string
}

async function fetchFromUrl(url: string): Promise<ResponseObject> {
    const fetched = await fetch(url);
    const json = await fetched.text();
    return JSON.parse(json);
}

const resources = [
    'actors',
    'addresses',
    'categories',
    'cities',
    'countries',
    'customers',
    'films',
    'languages',
    'staff',
    'stores'
];

const cache: { [key: string]: object[] | object } = {};
function addToCache(url: string, result: object[] | object): void {
    const normalizedUrl = new URL(url).toString();
    cache[normalizedUrl] = result;
}

async function cacheResource(resourceName: string): Promise<void> {
    let url = `http://localhost:8000/api/${resourceName}/`;
    do {
        const response = await fetchFromUrl(url);
        addToCache(url, response);
        for (const obj of response.results || []) {
            addToCache(obj.url, obj);
        }
        url = response.next;
    } while (url !== null)
}

Promise.all(resources.map(cacheResource))
    .then(() => {
        console.log(`
            /*eslint-disable */
            /* Generated by combine.js */
            // prettier-ignore
            var data = {
                ${
                    Object.keys(cache)
                        .map(url => `${url}: ${JSON.stringify(cache[url])}`)
                        .join(',\n')
                }
            };
            module.exports = data;
        `);
    })
    .catch(function (err) {
        console.error(err);
    });